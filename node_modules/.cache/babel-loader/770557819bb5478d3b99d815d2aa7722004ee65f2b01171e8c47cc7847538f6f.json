{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Button,Progress}from'antd';// Example UI components\nimport{deleteFile,downloadFile,getCameraList,getPresignedUrl,getVideoList,listFiles,uploadFile}from'../utils/cloudStorage';// Assuming imported functions\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const VideoDownload=_ref=>{let{videoId}=_ref;const[downloading,setDownloading]=useState(false);const[progress,setProgress]=useState(0);const[error,setError]=useState(null);const handleDownload=async()=>{setDownloading(true);setError(null);try{const videoUrl=await cloudStorage.getVideoDownloadUrl(videoId);const blob=await fetch(videoUrl).then(res=>res.blob());const filename=generateFilename(videoId,blob.type);const link=document.createElement('a');link.href=URL.createObjectURL(blob);link.download=filename;link.click();const reader=new FileReader();reader.readAsDataURL(blob);reader.onloadend=()=>{// Calculate progress based on loaded data\nconst loadedBytes=reader.result.length;const totalBytes=blob.size;setProgress(Math.round(loadedBytes/totalBytes*100));};}catch(err){setError(err);}finally{setDownloading(false);}};return/*#__PURE__*/_jsxs(\"div\",{children:[downloading&&/*#__PURE__*/_jsx(Progress,{percent:progress,status:\"active\"}),error&&/*#__PURE__*/_jsx(\"p\",{className:\"error\",children:error.message}),/*#__PURE__*/_jsx(Button,{onClick:handleDownload,disabled:downloading,children:downloading?'Downloading...':'Download Video'})]});};export default VideoDownload;","map":{"version":3,"names":["React","useState","useEffect","Button","Progress","deleteFile","downloadFile","getCameraList","getPresignedUrl","getVideoList","listFiles","uploadFile","jsx","_jsx","jsxs","_jsxs","VideoDownload","_ref","videoId","downloading","setDownloading","progress","setProgress","error","setError","handleDownload","videoUrl","cloudStorage","getVideoDownloadUrl","blob","fetch","then","res","filename","generateFilename","type","link","document","createElement","href","URL","createObjectURL","download","click","reader","FileReader","readAsDataURL","onloadend","loadedBytes","result","length","totalBytes","size","Math","round","err","children","percent","status","className","message","onClick","disabled"],"sources":["/workspace/cloud-storage-web-ui/src/components/VideoDownload.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, Progress } from 'antd'; // Example UI components\nimport {deleteFile, downloadFile, getCameraList, getPresignedUrl, getVideoList, listFiles, uploadFile} from '../utils/cloudStorage'; // Assuming imported functions\n\nconst VideoDownload = ({ videoId }) => {\n  const [downloading, setDownloading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n\n  const handleDownload = async () => {\n    setDownloading(true);\n    setError(null);\n\n    try {\n      const videoUrl = await cloudStorage.getVideoDownloadUrl(videoId);\n      const blob = await fetch(videoUrl).then((res) => res.blob());\n      const filename = generateFilename(videoId, blob.type);\n\n      const link = document.createElement('a');\n      link.href = URL.createObjectURL(blob);\n      link.download = filename;\n      link.click();\n\n      const reader = new FileReader();\n      reader.readAsDataURL(blob);\n      reader.onloadend = () => {\n        // Calculate progress based on loaded data\n        const loadedBytes = reader.result.length;\n        const totalBytes = blob.size;\n        setProgress(Math.round((loadedBytes / totalBytes) * 100));\n      };\n    } catch (err) {\n      setError(err);\n    } finally {\n      setDownloading(false);\n    }\n  };\n\n  return (\n    <div>\n      {downloading && <Progress percent={progress} status=\"active\" />}\n      {error && <p className=\"error\">{error.message}</p>}\n      <Button onClick={handleDownload} disabled={downloading}>\n        {downloading ? 'Downloading...' : 'Download Video'}\n      </Button>\n    </div>\n  );\n};\n\nexport default VideoDownload;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,MAAM,CAAEC,QAAQ,KAAQ,MAAM,CAAE;AACzC,OAAQC,UAAU,CAAEC,YAAY,CAAEC,aAAa,CAAEC,eAAe,CAAEC,YAAY,CAAEC,SAAS,CAAEC,UAAU,KAAO,uBAAuB,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAErI,KAAM,CAAAC,aAAa,CAAGC,IAAA,EAAiB,IAAhB,CAAEC,OAAQ,CAAC,CAAAD,IAAA,CAChC,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGnB,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACoB,QAAQ,CAAEC,WAAW,CAAC,CAAGrB,QAAQ,CAAC,CAAC,CAAC,CAC3C,KAAM,CAACsB,KAAK,CAAEC,QAAQ,CAAC,CAAGvB,QAAQ,CAAC,IAAI,CAAC,CAExC,KAAM,CAAAwB,cAAc,CAAG,KAAAA,CAAA,GAAY,CACjCL,cAAc,CAAC,IAAI,CAAC,CACpBI,QAAQ,CAAC,IAAI,CAAC,CAEd,GAAI,CACF,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAC,YAAY,CAACC,mBAAmB,CAACV,OAAO,CAAC,CAChE,KAAM,CAAAW,IAAI,CAAG,KAAM,CAAAC,KAAK,CAACJ,QAAQ,CAAC,CAACK,IAAI,CAAEC,GAAG,EAAKA,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC,CAC5D,KAAM,CAAAI,QAAQ,CAAGC,gBAAgB,CAAChB,OAAO,CAAEW,IAAI,CAACM,IAAI,CAAC,CAErD,KAAM,CAAAC,IAAI,CAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC,CACxCF,IAAI,CAACG,IAAI,CAAGC,GAAG,CAACC,eAAe,CAACZ,IAAI,CAAC,CACrCO,IAAI,CAACM,QAAQ,CAAGT,QAAQ,CACxBG,IAAI,CAACO,KAAK,CAAC,CAAC,CAEZ,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAC,UAAU,CAAC,CAAC,CAC/BD,MAAM,CAACE,aAAa,CAACjB,IAAI,CAAC,CAC1Be,MAAM,CAACG,SAAS,CAAG,IAAM,CACvB;AACA,KAAM,CAAAC,WAAW,CAAGJ,MAAM,CAACK,MAAM,CAACC,MAAM,CACxC,KAAM,CAAAC,UAAU,CAAGtB,IAAI,CAACuB,IAAI,CAC5B9B,WAAW,CAAC+B,IAAI,CAACC,KAAK,CAAEN,WAAW,CAAGG,UAAU,CAAI,GAAG,CAAC,CAAC,CAC3D,CAAC,CACH,CAAE,MAAOI,GAAG,CAAE,CACZ/B,QAAQ,CAAC+B,GAAG,CAAC,CACf,CAAC,OAAS,CACRnC,cAAc,CAAC,KAAK,CAAC,CACvB,CACF,CAAC,CAED,mBACEL,KAAA,QAAAyC,QAAA,EACGrC,WAAW,eAAIN,IAAA,CAACT,QAAQ,EAACqD,OAAO,CAAEpC,QAAS,CAACqC,MAAM,CAAC,QAAQ,CAAE,CAAC,CAC9DnC,KAAK,eAAIV,IAAA,MAAG8C,SAAS,CAAC,OAAO,CAAAH,QAAA,CAAEjC,KAAK,CAACqC,OAAO,CAAI,CAAC,cAClD/C,IAAA,CAACV,MAAM,EAAC0D,OAAO,CAAEpC,cAAe,CAACqC,QAAQ,CAAE3C,WAAY,CAAAqC,QAAA,CACpDrC,WAAW,CAAG,gBAAgB,CAAG,gBAAgB,CAC5C,CAAC,EACN,CAAC,CAEV,CAAC,CAED,cAAe,CAAAH,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}